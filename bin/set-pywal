#!/usr/bin/bash
shopt -s extglob
log_file=$HOME/.cache/set-pywal/logs

generate_log(){
    # $1: message
    echo "$1" : $(date) >> $log_file
 
    # append date to log file
    # date >> $log_file
}

# Verifies if 'python-pywal' is installed
if ! type "wal" >> /dev/null 2>&1; then
    echo -e \
    "\nThis script requires 'python-pywal' to be installed\n" \
    "\rPlease install it and rerun this script."
fi


# Verifies if 'variety' is installed
if ! type "variety" >> /dev/null 2>&1; then
    echo -e \
    "\nThis script requires 'variety' to be installed\n" \
    "\rPlease install it and rerun this script."
fi

if ! type "wal" >> /dev/null 2>&1 || ! type "variety" >> /dev/null 2>&1  ; then
    exit
fi

find-wallpaper(){
    current_wallpaper="$(cat $HOME/.config/variety/wallpaper/wallpaper.jpg.txt)"
}
walAlacrittyfunc(){
    # Alacritty Color Export
    # Version 0.1.0
    # github.com/egeesin
    #
    # Exports generated Wal colors to Alacritty config
    # WARNING: Don't forget to backup your Alacritty config
    # before execute this script!
    #
    # Dependencies: bash, grep, sed
    # Usage: ./script.sh
    #        ./script.sh <config yml>
    
    # Get Wal color file
    SRC=${HOME}"/.cache/wal/colors"
    [[ ! -e $SRC ]] && echo "ERR: Wal colors not found, exiting script. Did you executed Wal before?" && exit 0
    [[ -e $SRC ]] && echo "Colors found, source ready."
    
    READLINK=$( command -v greadlink | command -v readlink )
    
    # Get config file
    if [[ $1 ]]; then
        # Check path syntax here
        [[ -e $1 ]] && echo "Config found, destination ready."; CFG=$1
        [[ -L $1 ]] && echo "Following symlink to config..." && CFG=$($READLINK -f $1)
        [[ ! -e $1 ]] && echo "ERR: Selected config doesn't exist, exiting script." && exit 0
    else
        # Default config path in Mac systems
        [[ -e ${HOME}"/.config/alacritty/alacritty.yml" ]] && echo "Config found, destination ready." && CFG=${HOME}"/.config/alacritty/alacritty.yml"
        [[ -L ${HOME}"/.config/alacritty/alacritty.yml" ]] && echo "Following symlink to config..." && CFG=$($READLINK -f ${HOME}"/.config/alacritty/alacritty.yml")
        [[ ! -e $CFG ]] && echo "ERR: Alacritty config not found, exiting script." && exit 0
    fi
    
    # Get and convert hex colors from Wal cache
    index=1
    for line in $(grep -oE '[0-9a-fA-F]{6}' "$SRC")
    do
        regex='[0-9a-fA-F]{6}'
        if [[ $line =~ $regex ]]
        then
            eval "color$index=0x$line"
            index=$((index+1));
        fi
    done
    
    # Delete existing color declerations (generated by this script)
    if grep -q '^# BEGIN ACE' "$CFG"; then
        echo "Existing 'generated' colors found, replacing new colors...'"
        sed -i '' -e '/^# BEGIN ACE/,/^# END ACE/{/^# BEGIN ACE/!{/^# END ACE/!d;};}' "$CFG"
        # ^^^ There's something wrong with this command. If BEGIN ACE comment
        # doesn't exist but END ACE, just deletes all config except END ACE line.
        # In the mean time, surrounding comments must not touched, until finding
        # safer version of this command.
    else
        echo "There's no existing 'generated' colors, adding comments...";
        echo -e '# BEGIN ACE\n# END ACE' >> "$CFG";
    fi
    
    # vvv This line may give error on different systems.
sed -i '' -e "/^# BEGIN ACE/ r /dev/stdin" "$CFG" <<EOF
colors:
  primary:
    background: '$color1'
    foreground: '$color8'
  cursor:
    text:       '$color1'
    cursor:     '$color8'
  normal:
    black:      '$color1'
    red:        '$color2'
    green:      '$color3'
    yellow:     '$color4'
    blue:       '$color5'
    magenta:    '$color6'
    cyan:       '$color7'
    white:      '$color8'
  bright:
    black:      '$color9'
    red:        '$color10'
    green:      '$color11'
    yellow:     '$color12'
    blue:       '$color13'
    magenta:    '$color14'
    cyan:       '$color15'
    white:      '$color16'
EOF
    
    echo "'${SRC}' exported to '${CFG}'"
    
}

walColorsForDunst(){
    # Verifies if 'dunst' is installed
    if ! type "dunst" >> /dev/null 2>&1; then
        echo -e "\nInstall dunst to apply configuration\n"
        return
    fi
    
    echo "\nApplying Dunst configuration\n"
    cp -u ~/.config/dunst/dunstrc.template ~/.config/wal/templates/dunstrc
    
    # Symlink dunst config
    ln -sf ~/.cache/wal/dunstrc ~/.config/dunst/dunstrc
    
    # Restart dunst with the new color scheme
    pkill dunst
    dunst &
}

otherApps(){
    walColorsForDunst
    walAlacrittyfunc
}

qtile-restart(){
    qtile-cmd -o cmd -f restart
}

i3-restart(){
    i3-msg restart
}

kscreenlockwal(){
    kwriteconfig5 --file kscreenlockerrc --group Greeter --group Wallpaper --group org.kde.image --group General --key Image "$current_wallpaper" &
    wait
    generate_log "kde lock screen wallpaper changed"
}

restart-wm(){
    case "$1" in
        qtile) qtile-restart; exit;;
        i3) i3-restart; exit;;
        kde) kscreenlockwal; exit;;
    esac
}

set-wal(){
    find-wallpaper
    wal -i "$current_wallpaper"
    otherApps
    restart-wm "$1"
    generate_log "$(date)"
}
set-variety(){
    variety "$1" &
    wait
    set-wal "$2"
}
setwal() {
    case "$2" in
        -f) set-variety -f "$1" && exit;;
        -p) set-variety -p "$1" && exit;;
        -n) set-variety -n "$1" && exit;;
        -u) set-wal "$1" && exit;;
    esac
}



numArgs=$#
lastArg="${!numArgs}"

# check if last argument is directory

if [[ -f "$lastArg" ]]; then
    variety --set "$lastArg" && sleep 5 && set-wal "$1" && exit;
fi




# $1 is the wm(window manager eg. KDE, GNOME, Qtile, etc) name  *REQUIRED*
# $2 is the action (next, preivous, update) *REQUIRED*
# $3 is path to a wallpaper which you want to apply *Optional*
setwal "$1" "$2" "$3"

